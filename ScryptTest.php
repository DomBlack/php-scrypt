<?php
namespace Security\Scrypt;

require_once 'scrypt.php';

/**
 * Test class for Scrypt.
 * Generated by PHPUnit on 2012-07-12 at 15:41:06.
 */
class ScryptTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Scrypt
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Scrypt();
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
        parent::tearDown();
    }

    /**
     * Tests that the created Scrypt object isn't null.
     */
    public function testObjectNotNull()
    {
        $this->assertNotNull($this->object, "Object was null");
    }

    /**
     * Tests an error is thrown if consecutive calls to generateSalt return the
     * same salt.
     * Tests that a generated salt is 8 characters long.
     * Tests that specifying a salt length of 0 throws an error.
     */
    public function testGenerateSalt()
    {
        $salt = $this->object->generateSalt();
        $anotherSalt = $this->object->generateSalt();
        $this->assertNotEquals(
            $anotherSalt,
            $salt,
            "Consecutive calls create the same salt"
        );
        $this->assertEquals(8, strlen($salt), "Salt wasn't 8 characters long.");

        try {
            $salt = $this->object->generateSalt(0);
            $this->fail("Exception expected");
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Length must not be zero.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * Tests an error is thrown when a passed in password is blank.
     */
    public function testHashWhenPasswordBlank()
    {
        try {
            $this->object->hash("");
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Password length must not be zero.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * Tests an error is thrown when a passed in salt is blank.
     */
    public function testHashWhenSaltBlank()
    {
        $password = "password";
        $salt = "";

        try {
            $this->object->hash($password, $salt);
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Salt length must not be zero.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * Tests 3 edge cases for CPU difficulty.
     * a) Not a power of 2.
     * b) A power of 2, but not an integer. 2^(-2) = 0.25
     * c) Not greater than 1.
     * All three should fail.
     */
    public function testHashWhenCPUDifficultyIncorrect()
    {
        $password = "password";
        $salt = "12345somesalt7890";
        $CPUDifficulty = 3; // not a power of two.

        try {
            $this->object->hash($password, $salt, $CPUDifficulty);
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "CPU difficulty must be a power of two.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }

        $CPUDifficulty = 0.25; // not an integer
        try {
            $this->object->hash($password, $salt, $CPUDifficulty);
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "CPU difficulty must be a power of two.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }

        $CPUDifficulty = -4; // not greater than 1
        try {
            $this->object->hash($password, $salt, $CPUDifficulty);
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "CPU difficulty must be a power of two.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * Tests two edge cases for memory difficulty. Both should fail.
     */
    public function testMemoryDifficultyIncorrect()
    {
        $password = "password";
        $salt = false;
        $CPUDifficulty = 2;
        $memoryDifficulty = 1; // Not greater than 1 but positive.
        try {
            $this->object->hash($password, $salt, $CPUDifficulty, $memoryDifficulty);
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Memory difficulty must be greater than one.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }

        $memoryDifficulty = -2; // Not greater than 1 and negative.
        try {
            $this->object->hash($password, $salt, $CPUDifficulty, $memoryDifficulty);
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Memory difficulty must be greater than one.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * Tests two edge cases for parallel difficulty. Both should fail.
     */
    public function testParallelDifficultyIncorrect()
    {
        $password = "password";
        $salt = false;
        $CPUDifficulty = 2;
        $memoryDifficulty = 2;
        $parallelDifficulty = 1; // Not greater than 1 and positive.
        try {
            $this->object->hash($password, $salt, $CPUDifficulty);
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Parallel difficulty must be greater than one.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }

        $parallelDifficulty = -2; // Not greater than 1 and negative.
        try {
            $this->object->hash($password, $salt, $CPUDifficulty);
            $this->fail();
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Parallel difficulty must be greater than one.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * This test should run through without any issues.
     * Numbers selected for speed of execution.
     */
    public function testHashFunctionCorrect()
    {
        $password = "password";
        $salt = "salt";
        $CPUDifficulty = 2;
        $memoryDifficulty = 2;
        $parallelDifficulty = 2;
        try {
            $hash = $this->object->hash(
                $password,
                $salt,
                $CPUDifficulty,
                $memoryDifficulty,
                $parallelDifficulty
            );
            $knownParts = array(
                $CPUDifficulty,
                $memoryDifficulty,
                $parallelDifficulty,
                $salt
            );
            $this->assertStringStartsWith(
                implode("$", $knownParts)."$",
                $hash,
                "Returned hash has incorrect elements: ".$hash
            );
        } catch (ParametersIncorrectException $e) {
            $this->fail("No exception expected: ".$e->getMessage());
        }
    }

    /**
     * Checks that an error occurs when hash length is zero.
     */
    public function testCheckWhenHashLengthZero()
    {
        $password = "";
        $hash = "";
        try {
            $this->object->check($password, $hash);
            $this->fail("Exception expected");
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Hash length must be greater than zero.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
        $password = "password";
        $salt = "salt";
        $CPUDifficulty = 2;
        $memoryDifficulty = 2;
        $parallelDifficulty = 2;
        $hash = $this->object->hash(
            $password,
            $salt,
            $CPUDifficulty,
            $memoryDifficulty,
            $parallelDifficulty
        );
        $hashPart = null;
        list($N, $r, $p, $salt, $hashPart) = explode("$", $hash);
        $incorrectHash = ($N + 1)."$".$r."$".$p."$".$salt."$".$hashPart;
        try {
            $this->object->check($password, $incorrectHash);
            $this->fail("Exception expected");
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "CPU difficulty must be a power of two.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * Check function assumes that the hash passed in was created by the scrypt
     * hash function. This isn't necessarily the case therefore the hash after
     * being split may not have the required number of parts.
     */
    public function testWhenHashPartCountIncorrect()
    {
        $password = "";
        $hash = "";
        try {
            $this->object->check($password, $hash);
            $this->fail("Exception expected");
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Hash length must be greater than zero.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
        $password = "password";
        $salt = "salt";
        $CPUDifficulty = 2;
        $memoryDifficulty = 2;
        $parallelDifficulty = 2;
        $hash = $this->object->hash(
            $password,
            $salt,
            $CPUDifficulty,
            $memoryDifficulty,
            $parallelDifficulty
        );
        $hashPart = null;
        list($N, $r, $p, $salt, $hashPart) = explode("$", $hash);
        $incorrectHash = ($N + 1)."$".$r."$".$p."$".$hashPart;
        try {
            $this->object->check($password, $incorrectHash);
            $this->fail("Exception expected");
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Hash didn't have required number of parts.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * CPU Difficulty could end up munged - this checks for that condition.
     */
    public function testCheckWhenCPUDifficultyCorrupt()
    {
        $password = "password";
        $salt = "salt";
        $CPUDifficulty = 2;
        $memoryDifficulty = 2;
        $parallelDifficulty = 2;
        $hash = $this->object->hash(
            $password,
            $salt,
            $CPUDifficulty,
            $memoryDifficulty,
            $parallelDifficulty
        );
        $hashPart = null;
        list($N, $r, $p, $salt, $hashPart) = explode("$", $hash);
        $incorrectHash = ($N + 1)."$".$r."$".$p."$".$salt."$".$hashPart;
        try {
            $this->object->check($password, $incorrectHash);
            $this->fail("Exception expected");
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "CPU difficulty must be a power of two.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * Memory difficulty could end up munged - this checks for that condition.
     */
    public function testCheckWhenMemoryDifficultyCorrupt()
    {
        $password = "password";
        $salt = "salt";
        $CPUDifficulty = 2;
        $memoryDifficulty = 2;
        $parallelDifficulty = 2;
        $hash = $this->object->hash(
            $password,
            $salt,
            $CPUDifficulty,
            $memoryDifficulty,
            $parallelDifficulty
        );
        $hashPart = null;
        list($N, $r, $p, $salt, $hashPart) = explode("$", $hash);

        // Incorrect: Memory difficulty has to be greater than 1.
        $incorrectHash = $N."$"."0"."$".$p."$".$salt."$".$hashPart;
        try {
            $this->object->check($password, $incorrectHash);
            $this->fail("Exception expected");
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Memory difficulty must be greater than one.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }

    /**
     * Parallel Difficulty could end up munged - this checks for that condition.
     */
    public function testCheckWhenParallelDifficultyCorrupt()
    {
        $password = "password";
        $salt = "salt";
        $CPUDifficulty = 2;
        $memoryDifficulty = 2;
        $parallelDifficulty = 2;
        $hash = $this->object->hash(
            $password,
            $salt,
            $CPUDifficulty,
            $memoryDifficulty,
            $parallelDifficulty
        );
        $hashPart = null;
        list($N, $r, $p, $salt, $hashPart) = explode("$", $hash);

        // Incorrect: Parallel difficulty has to be greater than 1.
        $incorrectHash = $N."$".$r."$"."0"."$".$salt."$".$hashPart;
        try {
            $this->object->check($password, $incorrectHash);
            $this->fail("Exception expected");
        } catch (ParametersIncorrectException $e) {
            $this->assertEquals(
                "Parallel difficulty must be greater than one.",
                $e->getMessage(),
                "Unexpected error: ".$e->getMessage()
            );
        }
    }
}
?>
